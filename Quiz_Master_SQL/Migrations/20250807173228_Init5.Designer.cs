// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quiz_Master_SQL.Quiz_Master_SQL.Data;

#nullable disable

namespace Quiz_Master_SQL.Migrations
{
    [DbContext(typeof(QuizMasterDbContext))]
    [Migration("20250807173228_Init5")]
    partial class Init5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.ConfigTableDB", b =>
                {
                    b.Property<long>("MaxQuizId")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxUserId")
                        .HasColumnType("bigint");

                    b.ToTable("ConfigTablesDB");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.FavoritedQuizzeDB", b =>
                {
                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuizId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoritedQuizzes");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.FinishedChallengeDB", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChallengeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FinishedChallengesDB");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.LikedQuizzeDB", b =>
                {
                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuizId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LikedQuizzesDB");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.MessagesDB", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.QuizDB", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Likes")
                        .HasColumnType("bigint");

                    b.Property<long>("NumOfQuestions")
                        .HasColumnType("bigint");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuizzesDB");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.UserDB", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("Level")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberCreatedQuizzes")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberCreatedQuizzesChallengers")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberFavoriteQuizzes")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberFinishedChallenges")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberLikedQuizzes")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberSolvedNormalQuizzes")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberSolvedTestQuizzes")
                        .HasColumnType("bigint");

                    b.Property<long>("Password")
                        .HasColumnType("bigint");

                    b.Property<long?>("Points")
                        .HasColumnType("bigint");

                    b.Property<long>("UserGameId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserOptions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UsersDB");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.FavoritedQuizzeDB", b =>
                {
                    b.HasOne("Quiz_Master_SQL.Data.Models.QuizDB", "Quiz")
                        .WithMany("FavoritedQuizzes")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quiz_Master_SQL.Data.Models.UserDB", "User")
                        .WithMany("FavoritedQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.FinishedChallengeDB", b =>
                {
                    b.HasOne("Quiz_Master_SQL.Data.Models.UserDB", "UserDBs")
                        .WithMany("FinishedChallenges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDBs");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.LikedQuizzeDB", b =>
                {
                    b.HasOne("Quiz_Master_SQL.Data.Models.QuizDB", "QuizDBs")
                        .WithMany("LikedQuizzes")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Quiz_Master_SQL.Data.Models.UserDB", "UserDBs")
                        .WithMany("LikedQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizDBs");

                    b.Navigation("UserDBs");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.MessagesDB", b =>
                {
                    b.HasOne("Quiz_Master_SQL.Data.Models.UserDB", "UserDB")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDB");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.QuizDB", b =>
                {
                    b.HasOne("Quiz_Master_SQL.Data.Models.UserDB", "UserDb")
                        .WithMany("CreatedQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDb");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.QuizDB", b =>
                {
                    b.Navigation("FavoritedQuizzes");

                    b.Navigation("LikedQuizzes");
                });

            modelBuilder.Entity("Quiz_Master_SQL.Data.Models.UserDB", b =>
                {
                    b.Navigation("CreatedQuizzes");

                    b.Navigation("FavoritedQuizzes");

                    b.Navigation("FinishedChallenges");

                    b.Navigation("LikedQuizzes");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
